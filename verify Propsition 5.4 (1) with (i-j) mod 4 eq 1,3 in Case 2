// verify Propsition 5.4 (1) with (i-j) mod 4 eq 1,3 in Case 2, please chose proper "p" and "n" in "FiniteField(p,n)".

// generate some proper q such that "q\equiv 1\mod 4" and "q is a prime power".

A:={};
for x in [2..100] do 
    if (x mod 4) eq 1 and IsPrimePower(x) and (Random(PrimeBasis(x)) mod 4) eq 3 then A join:={x}; end if;
end for;
A;

// get A={ 9, 49, 81, 121, 361, 529, 729, 961 }.


F:=FiniteField(3,2);
w:=PrimitiveElement(F);

q:=9;
e:=4;
f:=IntegerRing()!((q-1)/e);
C0:={w^(e*j):j in [0..f-1]};

CC:=[];
for i in [0..e-1] do
    Ci:={w^i*x:x in C0};
    Include(~CC,Ci);
end for;

G:={x:x in F};
G0:=G diff {0};


for i,j in [1..4] do 
if (i-j) mod 4 eq 3 then 
P:=CC[i];
P join:=CC[j];
N:=G diff P;
N:=N diff {F!0};

Ct:=function(P,N);
M1:={**};
M2:={**};
for x,y in P do
   Include(~M1,x-y);
end for;

for x,y in N do
   Include(~M1,x-y);
end for;

for x in P do 
    for y in N do 
        Include(~M2,x-y);
        Include(~M2,y-x);
    end for;
end for;

C:={};
for x in G0 do 
    C join:={Multiplicity(M1,x)-Multiplicity(M2,x)};
end for;
return C;
end function;

Cts:=Ct(P,N);

if #Cts eq 1 then print "D=P-N is an SDS"; print "lambda=",Random(Cts);else print "D=P-N is not an SDS";end if;

end if;
end for;
